/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos

  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123

  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }

  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }

  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const bodyParser = require('body-parser');

const app = express();

let todoList = [
  {
    id: 1,
    title: 'title',
    description: 'desc',
    completed: false,
  },
  {
    id: 2,
    title: 'title',
    description: 'desc',
    completed: false,
  },
];

app.use(bodyParser.json());

app.get('/todos', (request, response) => {
  response.status(200).send(todoList);
});

app.get('/todos/:id', (request, response) => {
  const {id} = request.params;

  const todo = todoList.find((todo) => {
    return todo.id === parseInt(id);
  });

  if (todo) {
    response.status(200).send(todo);
  } else {
    response.status(404).send('todo not found');
  }
});

app.post('/todos', (request, response) => {
  const {body} = request;
  body.id = Math.floor(Math.random() * 1000000);
  todoList.push(body);
  response.send({id: body.id});
});

app.put('/todos/:id', (request, response) => {
  const {id} = request.params;
  const {body} = request;

  const todoIndex = todoList.findIndex(
    (singleTodo) => singleTodo.id === parseInt(id)
  );

  if (todoIndex === -1) {
    return response.status(404).send('Todo not found');
  }

  const todo = todoList[todoIndex];

  todo.title = body.title || todo.title;
  todo.description = body.description || todo.description;
  todo.completed =
    body.completed !== undefined ? body.completed : todo.completed;

  todoList[todoIndex] = todo;

  response.sendStatus(200);
});

app.delete('/todos/:id', (request, response) => {
  const {id} = request.params;
  const todoIndex = todoList.findIndex(
    (singleTodo) => singleTodo.id === parseInt(id)
  );

  if (todoIndex === -1) {
    return response.status(404).send('Todo not found');
  }

  if (todoIndex >= 0 && todoIndex < todoList.length) {
    todoList.splice(todoIndex, 1);
  }
  response.send(200);
});

app.all('*', (req, res) => {
  res.status(404).send('Route not found');
});

app.listen(3000, (err) => {
  if (err) console.log('Error in server setup');
  console.log('Server listening on Port', 3000);
});

module.exports = app;
